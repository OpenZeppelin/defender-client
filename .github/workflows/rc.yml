# Write github action in yaml for publishing packages from this mono repo to npm using lerna everytime there is a push to master

name: Tag & Release
on:
  push:
    branches:
      - improve-ci-cd

permissions:
  contents: write # for checkout and tag
  pull-requests: write  # for comments

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3.5.2

      - name: Use node@16
        uses: actions/setup-node@v3
        with:
          node-version: 16.20.0

      - name: Node modules cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            ~/.cache/node-gyp-cache
          key: "${{ runner.os }}-yarn-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}"
          restore-keys: |
            ${{ runner.os }}-yarn-${{ env.cache-name }}-
        env:
          cache-name: v4

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Check build
        run: yarn build

      - name: Check linting
        run: yarn lint:check

  test:
    name: Unit Tests
    runs-on: ubuntu-22.04
    needs: build

    steps:
    - name: Checkout
      uses: actions/checkout@v3.5.2

    - name: Use node@16
      uses: actions/setup-node@v3
      with:
        node-version: 16.20.0

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Node modules cache
      uses: actions/cache@v3
      id: yarn-cache
      with:
        path: |
          ${{ steps.yarn-cache-dir-path.outputs.dir }}
          ~/.cache/node-gyp-cache
        key: "${{ runner.os }}-yarn-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}"
        restore-keys: |
          ${{ runner.os }}-yarn-${{ env.cache-name }}-
      env:
        cache-name: v4

    - name: Install dependencies
      run: yarn --frozen-lockfile

    - name: Lint & format checks
      run: yarn style

    - name: Build
      run: yarn build

    - name: Run tests
      run: yarn test

  # Git tag the commit for publishing
  tag:
    name: Tag RC candidate for all packages
    runs-on: ubuntu-22.04
    needs: test
    outputs:
      next_rc_version: ${{ steps.update_version.outputs.next_rc_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.2

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.SVC_GPG_KEY }}
          passphrase: ${{ secrets.SVC_GPG_PASSPHRASE }}
          git_config_global: true
          git_tag_gpgsign: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Update RC candidate version for deploy client
        run: |
          yarn versionup-deploy:preminor

      - name: Update RC candidate version ( excluding deploy client )
        id: update_version
        run: |
          yarn versionup:preminor
          TAG_NAME=$(node -p "require('./lerna.json').version")
          git add .
          git commit -m "Update version to $TAG_NAME" --no-verify
          echo "next_rc_version=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Tag Check
        id: tag_check
        run: |
          CURRENT_VERSION=$(node -p 'require("./lerna.json").version')
          GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/v${CURRENT_VERSION}"
          http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
            -H "Authorization: token ${GITHUB_TOKEN}")
          if [ "$http_status_code" -ne "404" ] ; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Create Tag
        if: steps.tag_check.outputs.tag_exists == 'false'
        run: |
          git tag -a ${{ steps.update_version.outputs.next_rc_version }} -m "Release ${{ steps.update_version.outputs.next_rc_version }}"
          git push origin ${{ steps.update_version.outputs.next_rc_version }} --no-verify

  create-release:
    name: Create Release
    needs: tag
    uses: ./.github/workflows/release.yml
    with:
      tag: ${{ needs.tag.outputs.next_rc_version }}
      prerelease: true
