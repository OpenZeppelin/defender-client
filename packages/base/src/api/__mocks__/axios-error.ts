import { AxiosError, AxiosRequestHeaders } from 'axios';

export const mockAxiosError: AxiosError = {
  name: 'Error',
  message: 'Request failed with status code 401',
  config: {
    url: '/relayer',
    method: 'get',
    headers: {
      'Accept': 'application/json, text/plain, */*',
      'X-Api-Key': '4Rfp2GEHDjgesA6MdseUM1n8B8kT9hgs',
      'Authorization': 'Bearer WRONG',
      'Content-Type': 'application/json',
      'User-Agent': 'axios/0.21.4',
    } as unknown as AxiosRequestHeaders,
    baseURL: 'https://api.defender.openzeppelin.com/',
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false,
    },
    data: undefined,
  },
  request: {
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,

    _header:
      'GET /relayer HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'X-Api-Key: 4Rfp2GEHDjgesA6MdseUM1n8B8kT9hgs\r\n' +
      'Authorization: Bearer WRONG\r\n' +
      'Content-Type: application/json\r\n' +
      'User-Agent: axios/0.21.4\r\n' +
      'Host: api.defender.openzeppelin.com\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    agent: {
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      requests: {},
      freeSockets: {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      scheduling: 'fifo',
      maxCachedSessions: 100,
    },
    socketPath: undefined,
    method: 'GET',
    insecureHTTPParser: undefined,
    path: '/relayer',
    _ended: true,
    res: {
      readable: false,
      _eventsCount: 3,
      _maxListeners: undefined,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 401,
      statusMessage: 'Unauthorized',
      _consuming: false,
      _dumped: false,
      responseUrl: 'https://api.defender.openzeppelin.com/relayer',
      redirects: [],
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'api.defender.openzeppelin.com',
    protocol: 'https:',
  },
  response: {
    status: 401,
    statusText: 'Unauthorized',
    headers: {
      'date': 'Thu, 21 Jul 2022 14:54:13 GMT',
      'content-type': 'application/json',
      'content-length': '26',
      'connection': 'close',
      'x-amzn-requestid': 'f18f6866-a9e7-4470-92b4-7c50d62330a4',
      'x-amzn-errortype': 'UnauthorizedException',
      'x-amz-apigw-id': 'Vn1HTHt3PHcF_2w=',
      'x-amzn-trace-id': 'Root=1-62d96894-1766d59626818111787bf38a',
      'x-cache': 'Error from cloudfront',
      'via': '1.1 fcad480c2a8351d8cd68e3adc43dff3e.cloudfront.net (CloudFront)',
      'x-amz-cf-pop': 'CDG50-C2',
      'x-amz-cf-id': 'MCT4JHArIztgReF1WvWDoee_m96JGjWcVZpeb3AU7NHwYrVA6sGqgQ==',
      'cf-cache-status': 'DYNAMIC',
      'expect-ct': 'max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"',
      'server': 'cloudflare',
      'cf-ray': '72e4c540dfa999a5-CDG',
    },
    config: {
      url: '/relayer',
      method: 'get',
      baseURL: 'https://api.defender.openzeppelin.com/',
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      data: undefined,
      headers: {
        'Accept': 'application/json, text/plain, */*',
        'X-Api-Key': '4Rfp2GEHDjgesA6MdseUM1n8B8kT9hgs',
        'Authorization': 'Bearer WRONG',
        'Content-Type': 'application/json',
        'User-Agent': 'axios/0.21.4',
      } as unknown as AxiosRequestHeaders,
    },
    request: {
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _header:
        'GET /relayer HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'X-Api-Key: 4Rfp2GEHDjgesA6MdseUM1n8B8kT9hgs\r\n' +
        'Authorization: Bearer WRONG\r\n' +
        'Content-Type: application/json\r\n' +
        'User-Agent: axios/0.21.4\r\n' +
        'Host: api.defender.openzeppelin.com\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      socketPath: undefined,
      method: 'GET',
      insecureHTTPParser: undefined,
      path: '/relayer',
      _ended: true,
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'api.defender.openzeppelin.com',
      protocol: 'https:',
    },
    data: { message: 'Unauthorized' },
  },
  isAxiosError: true,
  toJSON: () => ({}),
};
